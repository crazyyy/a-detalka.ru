// Generated by CoffeeScript 1.8.0
(function() {
  (function($) {
    return $.widget('ui.wAlertInline', {
      options: {
        selector: {
          closeButton: '.j-close-button',
          heading: '.j-heading',
          message: '.j-message'
        }
      },
      _create: function() {
        var autoClose, key, selector, _ref;
        _ref = this.options.selector;
        for (key in _ref) {
          selector = _ref[key];
          this["$" + key] = $(selector, this.element);
        }
        autoClose = this.element.data('auto-close');
        if (autoClose) {
          setTimeout((function(_this) {
            return function() {
              return _this.element.remove();
            };
          })(this), parseInt(autoClose, 10));
        }
        return this.$message.find('a').addClass('alert-link');
      }
    });
  })(jQuery);

  $(document).ready(function() {
    return $('.wAlertInline').wAlertInline();
  });

}).call(this);
// Обработка клика "Заказать звонок"
$(document).ready(function(){
	$(".callOrderLink").fancybox({
		'width': 455,
		'height': 'auto',
		'autoDimensions': false,
		'titleShow': false,
		'padding': 0,
		'transitionIn': 'none',
		'transitionOut': 'none',
		'href': SiteLocale + '/call_order',
		'type': 'ajax',
		'helpers': {
			'overlay': {
				'locked': false
			}
		}
	});
});// Generated by CoffeeScript 1.9.2
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    return $.widget('ui.wGoodsQuantityBuy', {
      INC: 1,
      DESC: -1,
      options: {
        selector: {
          buttonPlus: '.j-button-plus',
          buttonMinus: '.j-button-minus',
          input: '.j-quantity-input',
          min: '.j-quantity-min',
          max: '.j-quantity-max',
          multiplicity: '.j-quantity-multiplicity',
          confirmButton: '.j-confirm-button'
        },
        qtip: {
          timeout: 1000,
          'z-index': 17000
        },
        initted: function() {}
      },
      confirmCallback: null,
      inputChangeCallback: null,
      _create: function() {
        var key, maxValue, minValue, multiplicity, ref, selector, val;
        ref = this.options.selector;
        for (key in ref) {
          selector = ref[key];
          this["$" + key] = $(selector, this.element);
        }
        if (this.$max.length) {
          maxValue = parseInt(this.$max.val(), 10);
          if (maxValue > 0) {
            this.maxValue = maxValue;
          }
        }
        if (this.$multiplicity.length) {
          multiplicity = parseInt(this.$multiplicity.val(), 10);
          this.multiplicity = isNaN(multiplicity) ? 1 : multiplicity;
        } else {
          this.multiplicity = 1;
        }
        if (this.$min.length) {
          minValue = parseInt(this.$min.val(), 10);
          this.minValue = isNaN(minValue) ? 1 : minValue;
        } else {
          this.minValue = 1;
        }
        if (this.$input.length) {
          val = parseInt(this.$input.val(), 10);
          this.currentValue = isNaN(val) ? 1 : val;
          if (typeof this.inputChangeCallback === 'function') {
            this.inputChangeCallback.apply(this.$input.get(0));
          }
        }
        this.element.on('click', this.options.selector.buttonPlus, (function(_this) {
          return function(event) {
            return _this._changeQuantity(_this.INC);
          };
        })(this));
        this.element.on('click', this.options.selector.buttonMinus, (function(_this) {
          return function(event) {
            return _this._changeQuantity(_this.DESC);
          };
        })(this));
        this.element.on('change', this.options.selector.input, (function(_this) {
          return function(event) {
            return _this._onChangeInputValue(event);
          };
        })(this));
        this.element.on('click', this.options.selector.input, (function(_this) {
          return function(event) {
            return _this.$input.trigger('select');
          };
        })(this));
        this.element.on('keydown', this.options.selector.input, (function(_this) {
          return function(event) {
            return _this._onKeyBoardInput(event);
          };
        })(this));
        this.element.on('keyup', this.options.selector.input, (function(_this) {
          return function(event) {
            return _this._onKeyBoardInputAfter(event);
          };
        })(this));
        this.element.on('paste', this.options.selector.input, (function(_this) {
          return function(event) {
            return _this._onInputPaste(event);
          };
        })(this));
        this.element.on('focusout', this.options.selector.input, (function(_this) {
          return function(event) {
            return _this.$input.trigger('change');
          };
        })(this));
        this.element.on('click', this.options.selector.confirmButton, (function(_this) {
          return function(event) {
            return _this._confirmChoice(event);
          };
        })(this));
        this._checkInputValue();
        return this.options.initted();
      },
      _changeQuantity: function(direction) {
        var incVal;
        if (this.currentValue != null) {
          incVal = direction * this.multiplicity;
          switch (direction) {
            case this.INC:
              if (this.maxValue != null) {
                if (this.currentValue % this.multiplicity <= this.maxValue % this.multiplicity && (this.maxValue % this.multiplicity)) {
                  incVal = 1;
                }
                if ((this.currentValue + incVal) > this.maxValue) {
                  this._showInputTooltip(this.$input.data('wrong-maxvalue'));
                  return;
                }
                if ((this.maxValue != null) && this.currentValue % this.multiplicity === this.maxValue % this.multiplicity) {
                  incVal = this.multiplicity - (this.currentValue % this.multiplicity);
                }
              }
              break;
            case this.DESC:
              if (this.minValue != null) {
                if ((this.maxValue != null) && this.maxValue % this.multiplicity) {
                  switch (false) {
                    case !(this.currentValue % this.multiplicity > 0):
                      incVal = direction;
                      break;
                    case !!(this.currentValue % this.multiplicity):
                      incVal = direction * this.multiplicity + this.maxValue % this.multiplicity;
                  }
                }
                if ((this.currentValue + incVal) < this.minValue) {
                  this._showInputTooltip(this.$input.data('wrong-minvalue'));
                  return;
                }
              }
          }
          this.currentValue += incVal;
          return this._changeInputValue(this.currentValue);
        }
      },
      _onChangeInputValue: function(event) {
        return this._checkInputValue(true);
      },
      _checkInputValue: function(alert) {
        if (alert == null) {
          alert = false;
        }
        this.currentValue = parseInt(this.$input.val(), 10);
        if ((this.currentValue == null) || isNaN(this.currentValue)) {
          this.currentValue = this.minValue;
          if (alert) {
            this._showInputTooltip(this.$input.data('wrong-keycode'));
          }
        }
        if ((this.maxValue != null) && this.currentValue % this.multiplicity > this.maxValue % this.multiplicity || (this.maxValue == null) && this.currentValue % this.multiplicity > 0) {
          if (this.currentValue > this.multiplicity) {
            this.currentValue = this.currentValue - (this.currentValue % this.multiplicity);
          } else {
            this.currentValue = this.multiplicity;
          }
          if (alert) {
            this._showInputTooltip(this.$input.data('wrong-multiplicityvalue'));
          }
        }
        if ((this.maxValue != null) && this.currentValue > this.maxValue) {
          this.currentValue = this.maxValue;
          if (alert) {
            this._showInputTooltip(this.$input.data('wrong-maxvalue'));
          }
        }
        if ((this.minValue != null) && this.currentValue < this.minValue) {
          this.currentValue = this.minValue;
          if (alert) {
            this._showInputTooltip(this.$input.data('wrong-minvalue'));
          }
        }
        this._setInputValue(this.currentValue);
        this._toggleButton(this.$buttonPlus, (this.maxValue != null) && this.currentValue === this.maxValue);
        return this._toggleButton(this.$buttonMinus, (this.minValue != null) && this.currentValue === this.minValue);
      },
      _toggleButton: function($button, disable) {
        return $button.attr('title', $button.data(disable ? 'disabled-title' : 'enabled-title'));
      },
      _showInputTooltip: function(text) {
        var currentText, qtipApi;
        qtipApi = this.$input.qtip('api');
        if (qtipApi != null) {
          currentText = qtipApi.get('content.text');
        }
        if (text !== currentText) {
          if (qtipApi != null ? qtipApi.destroyed : void 0) {
            qtipApi.destroy();
          }
          $.fn.qtip.zindex = this.options.qtip['z-index'];
          return this.$input.qtip({
            content: {
              text: text
            },
            hide: {
              event: false,
              inactive: this.options.qtip.timeout
            },
            position: {
              my: 'bottom right',
              at: 'top center',
              target: this.$input
            },
            events: {
              hide: (function(_this) {
                return function(event, api) {
                  return _this.$input.qtip('destroy');
                };
              })(this)
            }
          }).qtip('show');
        }
      },
      _isKeyValid: function(event) {
        var errorKeys, keyCode, numKeys;
        keyCode = this._getKeyCode(event);
        if (keyCode != null) {
          errorKeys = ((function(_this) {
            return function() {
              var errorKeysArr, i, results;
              if (_this.errorKeys == null) {
                errorKeysArr = [
                  [32], (function() {
                    results = [];
                    for (i = 65; i <= 90; i++){ results.push(i); }
                    return results;
                  }).apply(this), [106, 107, 108, 109, 110, 111], [186, 187, 188, 189, 190, 191, 192], [219, 220, 221, 222]
                ];
                _this.errorKeys = Array.prototype.concat.apply([], errorKeysArr);
              }
              return _this.errorKeys;
            };
          })(this))();
          numKeys = ((function(_this) {
            return function() {
              var numKeysArr;
              if (_this.numKeys == null) {
                numKeysArr = [[48, 49, 50, 51, 52, 53, 54, 55, 56, 57], [96, 97, 98, 99, 100, 101, 102, 103, 104, 105]];
                _this.numKeys = Array.prototype.concat.apply([], numKeysArr);
              }
              return _this.numKeys;
            };
          })(this))();
          return !(!(event.ctrlKey || event.altKey) && indexOf.call(errorKeys, keyCode) >= 0) && !(event.shiftKey && indexOf.call(numKeys, keyCode) >= 0);
        } else {
          return false;
        }
      },
      _getKeyCode: function(event) {
        var keyCode;
        if (event.keyCode != null) {
          keyCode = event.keyCode;
        }
        if (!((keyCode != null) && (event.which != null))) {
          keyCode = event.which;
        }
        return keyCode;
      },
      _onKeyBoardInput: function(event) {
        if ((event == null) || !this._isKeyValid(event)) {
          event.preventDefault();
          return this._showInputTooltip(this.$input.data('wrong-keycode'));
        }
      },
      _setInputValue: function(val) {
        if ((val + '') !== this.$input.val()) {
          this.$input.val(val);
        }
        if (typeof this.inputChangeCallback === 'function') {
          return this.inputChangeCallback.apply(this.$input.get(0));
        }
      },
      _changeInputValue: function(val) {
        this._setInputValue(val);
        return this.$input.trigger('change');
      },
      _onKeyBoardInputAfter: function(event) {
        var val;
        val = this.$input.val();
        if (parseInt(val[0], 10) === 0) {
          val = val.slice(1, val.length);
          event.preventDefault();
          this._showInputTooltip(this.$input.data('wrong-keycode'));
          this._setInputValue(val);
        }
        if (event.which === 13) {
          return this._confirmChoice();
        }
      },
      _onInputPaste: function(event) {
        return setTimeout((function(_this) {
          return function() {
            return _this._changeInputValue(_this.$input.val());
          };
        })(this), 50);
      },
      _confirmChoice: function(event) {
        if (typeof this.confirmCallback === 'function') {
          return this.confirmCallback.apply(this.$confirmButton.get(0));
        }
      }
    });
  })(jQuery);

  $(document).ready(function() {
    return $('.j-article-buttons').wGoodsQuantityBuy();
  });

}).call(this);
$(document).ready(function() {
	$('ul#my-menu ul').each(function(i) { // Check each submenu:
		if ($.cookie('submenuMark-' + i)) {  // If index of submenu is marked in cookies:
			$(this).show().prev().removeClass('collapsed').addClass('expanded'); // Show it (add apropriate classes)
			$(this).show().parent().addClass('act'); // Show it (add apropriate classes)
		} else {
			$(this).hide().prev().removeClass('expanded').addClass('collapsed'); // Hide it
			$(this).hide().parent().removeClass('act'); // Show it (add apropriate classes)
		}
		$(this).prev().addClass('collapsible').click(function() { // Attach an event listener
			var this_i = $('ul#my-menu ul').index($(this).next()); // The index of the submenu of the clicked link
			if ($(this).next().css('display') == 'none') {
				$(this).next().slideDown(50, function () { // Show submenu:
					$(this).prev().removeClass('collapsed').addClass('expanded');
					$(this).parent().addClass('act');
					cookieSet(this_i);
				});
			} else {
				$(this).next().slideUp(50, function () { // Hide submenu:
					$(this).prev().removeClass('expanded').addClass('collapsed');
					$(this).parent().removeClass('act');
					cookieDel(this_i);
					$(this).find('ul').each(function() {
						$(this).hide(0, cookieDel($('ul#my-menu ul').index($(this)))).prev().removeClass('expanded').addClass('collapsed').parent().removeClass('act');
					});
				});
			}
			return false; // Prohibit the browser to follow the link address
		});
	});
});

function cookieSet(index) {
	$.cookie('submenuMark-' + index, 'opened', {expires: null, path: '/'}); // Set mark to cookie (submenu is shown):
}
function cookieDel(index) {
	$.cookie('submenuMark-' + index, null, {expires: null, path: '/'}); // Delete mark from cookie (submenu is hidden):
}$(document).ready(function() {
	$('#s2').cycle();
});
//кнопка опроса задизейблена, если не выбран ни один вариант
$(document).ready(function(){
	var submitBtn = $('#pollSubmitButton');

	submitBtn.attr('disabled','disabled');
	$('#pollForm').change(function(){
		if($('.pollItem').is(':checked')){
			submitBtn.removeAttr('disabled');
		}
		else{
			submitBtn.attr('disabled','disabled');
		}
	});
});// Generated by CoffeeScript 1.9.2
(function() {
  (function($, siteLocale) {
    if (siteLocale == null) {
      siteLocale = '/';
    }
    return $.widget('ui.extendedAutocomplete', $.ui.autocomplete, {
      _init: function() {
        var doc, extendMenu, menuOptions, mouseDown;
        this.element.bind('paste', (function(_this) {
          return function(event) {
            return setTimeout(function() {
              return _this.element.extendedAutocomplete('search', _this.element.val());
            }, 10);
          };
        })(this));
        this.element.on('focus', (function(_this) {
          return function(event) {
            var el, range, strLength;
            el = _this.element.get(0);
            strLength = _this.element.val().length;
            switch (false) {
              case el.setSelectionRange == null:
                return el.setSelectionRange(strLength, strLength);
              case !el.createTextRange:
                range = el.createTextRange();
                range.collapse(true);
                range.moveEnd('character', strLength);
                range.moveStart('character', strLength);
                return range.select();
            }
          };
        })(this));
        mouseDown = this.menu.element.data('events').mousedown;
        doc = this.element[0].ownerDocument;
        menuOptions = this.menu.options;
        menuOptions.selected = (function(_this) {
          return function(event, ui) {
            var item, previous;
            if ((ui != null ? ui.item : void 0) == null) {
              return;
            }
            item = ui.item.data('item.autocomplete');
            previous = _this.previous;
            if (_this.element[0] !== doc.activeElement) {
              _this.element.focus();
              _this.previous = previous;
              setTimeout(function() {
                _this.previous = previous;
                return _this.selectedItem = item;
              }, 1);
            }
            if (false !== _this._trigger('select', event, {
              item: item
            })) {
              _this.element.val(item.value);
            }
            _this.term = _this.element.val();
            _this.close(event);
            return _this.selectedItem = item;
          };
        })(this);
        extendMenu = $('<div><table><tbody></tbody></table></div>').addClass('ui-autocomplete').addClass('extendedAutocomplete').appendTo($(this.options.appendTo || 'body', this.element[0].ownerDocument)[0]).mousedown(function(event) {
          var ref, ref1;
          if ((mouseDown != null ? (ref = mouseDown[0]) != null ? (ref1 = ref.handler) != null ? ref1.apply : void 0 : void 0 : void 0) != null) {
            return mouseDown[0].handler.apply(this, arguments);
          }
        }).find('tbody').menu(menuOptions).attr('style', this.menu.element.attr('style'));
        this.menu.element.remove();
        delete this.menu;
        this.menu = extendMenu.data('menu');
        this.menu.element.off('click');
        this.menu.element.click((function(_this) {
          return function(event) {
            if ($(event.target).closest('.ui-menu-item').find('a').length) {
              return _this.menu.select(event);
            }
          };
        })(this));
        this.menu.refresh = function() {
          return this.element.children('tr:not(.ui-menu-item):has(a)').addClass('ui-menu-item').attr('role', 'menuitem').mouseenter((function(_this) {
            return function(event) {
              return _this.activate(event, $(event.target).closest('tr'));
            };
          })(this)).mouseleave((function(_this) {
            return function() {
              return _this.deactivate();
            };
          })(this)).find('a').attr('tabindex', -1);
        };
        this.menu.activate = function(event, item) {
          var elementHeight, offset, scroll;
          this.deactivate();
          if (this.hasScroll()) {
            offset = item.offset().top - this.element.offset().top;
            scroll = this.element.scrollTop();
            elementHeight = this.element.height();
            if (offset < 0) {
              this.element.scrollTop(scroll + offset);
            } else {
              if (offset >= elementHeight) {
                this.element.scrollTop(scroll + offset - elementHeight + item.height());
              }
            }
          }
          this.active = item.eq(0).addClass('ui-state-hover').attr('id', 'ui-active-menuitem').end();
          return this._trigger('focus', event, {
            item: item
          });
        };
        this.menu.deactivate = function() {
          if (this.active == null) {
            return;
          }
          this.active.removeClass('ui-state-hover').removeAttr('id');
          this._trigger('blur');
          return this.active = null;
        };
        return this.menu.select = (function(_this) {
          return function(event) {
            var $activeLink;
            if (!(event.button > 0)) {
              if (!$(event.target).is('a')) {
                $activeLink = _this.menu.active.find('a');
                if ($activeLink.length) {
                  location.href = $activeLink.attr('href');
                }
              }
              _this.menu._trigger('selected', event, {
                item: _this.menu.active
              });
              return _this.element.prop('disabled', true);
            }
          };
        })(this);
      },
      _normalize: function(items) {
        if (items.length && items[0].label && items[0].value) {
          return items;
        } else {
          return $.map(items, function(item) {
            if (typeof item === 'string') {
              return {
                label: item,
                value: item
              };
            } else {
              return $.extend({
                label: item.label || item.value || item.number,
                value: item.value || item.label || item.number
              }, item);
            }
          });
        }
      },
      _renderItem: function(ul, item) {
        return $('<tr></tr>').data('item.autocomplete', item).append($('<td class="searchFormAutocomplete searchFormAutocompleteBrand"></td>').text(item.brand)).append($("<td class=\"searchFormAutocomplete searchFormAutocompleteNumber\"><a href=\"" + siteLocale + item.url + "\">" + item.number + "</a></td>")).appendTo(ul);
      }
    });
  })(jQuery, typeof SiteLocale !== "undefined" && SiteLocale !== null ? SiteLocale : null);

  (function(enabled, is4mycar) {
    if (enabled == null) {
      enabled = null;
    }
    if (is4mycar == null) {
      is4mycar = 0;
    }
    return $(document).ready(function() {
      var $appendTo, $content, $pcode, $searchForm, position;
      $searchForm = $('form[name="searchform"]');
      $pcode = $searchForm.find('input[name="pcode"],input:text');
      if (enabled) {
        $content = $('.wrapper > .content_div');
        if (!$content.length) {
          $content = $('.wrapper > .content-div, .wrapper > .content-div-container > .content-div');
          if (!$content.length) {
            $content = $('.wrapper > .content');
          }
        }
        if ($content.length) {
          position = $content.css('position');
          if (position !== 'absolute' && position !== 'relative') {
            $content = $content.css({
              position: 'relative'
            });
          }
          $appendTo = $content;
        } else {
          $appendTo = $('body');
        }
        $pcode.extendedAutocomplete({
          appendTo: $appendTo,
          minLength: 3,
          delay: 300,
          source: function(request, response) {
            return $.ajax({
              url: 'http://admin.abcp.ru/ajax/modules/search/get.search.tips.php',
              dataType: 'jsonp',
              data: {
                term: request.term,
                is4mycar: is4mycar
              },
              success: function(data) {
                return response(data);
              }
            });
          }
        });
        if (!$.browser.mobile && !$pcode.hasClass('unfocus')) {
          $pcode.focus();
        }
      }
      return $searchForm.submit(function(event) {
        if ($.trim($pcode.val()).length) {
          return $(this).find(':submit, :image').prop('disabled', true);
        } else {
          return event.preventDefault();
        }
      });
    });
  })(typeof initSearchFormOnExtendedAutocomplete !== "undefined" && initSearchFormOnExtendedAutocomplete !== null ? initSearchFormOnExtendedAutocomplete : null, typeof initSearchFormOnExtendedAutocomplete4mycar !== "undefined" && initSearchFormOnExtendedAutocomplete4mycar !== null ? initSearchFormOnExtendedAutocomplete4mycar : 0);

}).call(this);


//скрипт для вкладок над поисковой строкой
$(document).ready(function(){
    $('.searchTabs a[href^="/' + location.pathname.split("/")[1] + '"]').parents("li").addClass('act'); //добавляется класс act активной вкладке
    $('.searchTabs li.mainItem.act').nextAll('li').removeClass('act'); //удаляется для остальных
});

// Generated by CoffeeScript 1.8.0
(function() {
  var StatusSyncClient,
    __slice = [].slice;

  StatusSyncClient = (function() {
    StatusSyncClient.prototype.options = {
      request: {
        url: '/ajax/vinqu/get.expert.status.php',
        interval: 5000,
        dataType: 'jsonp'
      },
      cookie: {
        notificationClientCounter: {
          name: 'vinquNotifyClientCounter',
          expires: 9000
        },
        notificationClient: {
          name: 'vinquNotifyClient',
          expires: 7000
        },
        status: {
          name: 'vinquNotifyData',
          expires: 11000
        },
        fullData: {
          name: 'vinquExpertFullData',
          expires: 11000
        }
      }
    };

    StatusSyncClient.prototype.notifyClientId = null;

    StatusSyncClient.prototype.callback = function() {};

    StatusSyncClient.prototype.tickCallback = function() {};

    StatusSyncClient.prototype.lastData = null;

    StatusSyncClient.prototype.forceSlave = false;

    function StatusSyncClient(options) {
      var onBeforeUnload;
      this.getClientId();
      if ((options != null ? options.callback : void 0) != null) {
        this.callback = options.callback;
      }
      if ((options != null ? options.tickCallback : void 0) != null) {
        this.tickCallback = options.tickCallback;
      }
      if (options != null ? options.slave : void 0) {
        this.forceSlave = true;
      }
      this.checkStatus();
      onBeforeUnload = window.onbeforeunload;
      window.onbeforeunload = (function(_this) {
        return function(e) {
          _this.destroy();
          if (typeof onBeforeUnload === "function") {
            onBeforeUnload();
          }
          return void 0;
        };
      })(this);
    }

    StatusSyncClient.prototype.getClientCounter = function() {
      var counter, e;
      try {
        counter = $.cookie(this.options.cookie.notificationClientCounter.name);
      } catch (_error) {
        e = _error;
        counter = 0;
      }
      counter = parseInt(counter, 10) || 0;
      $.cookie(this.options.cookie.notificationClientCounter.name, counter, {
        path: '/',
        expires: this.getExpires(this.options.cookie.notificationClientCounter.expires)
      });
      return counter;
    };

    StatusSyncClient.prototype.getClientId = function() {
      this.notifyClientId = parseInt($.cookie(this.getClientIdCookieName()), 10) || 0;
      if (!this.notifyClientId) {
        this.notifyClientId = this.getClientCounter() + 1;
        $.cookie(this.options.cookie.notificationClientCounter.name, this.notifyClientId, {
          path: '/',
          expires: this.getExpires(this.options.cookie.notificationClientCounter.expires)
        });
      }
      $.cookie(this.getClientIdCookieName(), this.notifyClientId, {
        path: '/',
        expires: this.getExpires(this.options.cookie.notificationClient.expires)
      });
      return this.notifyClientId;
    };

    StatusSyncClient.prototype.getExpires = function(expires) {
      var date;
      date = new Date();
      date.setTime(date.getTime() + expires);
      return date;
    };

    StatusSyncClient.prototype.getClientIdCookieName = function(id) {
      if (id == null) {
        id = this.notifyClientId;
      }
      return "" + this.options.cookie.notificationClient.name + "-" + id;
    };

    StatusSyncClient.prototype.isStatusChanges = function(response) {
      var dataChange;
      if (((response != null ? response.expert : void 0) != null) && (response.query != null)) {
        dataChange = $.cookie(this.options.cookie.status.name) !== this.formData(response);
        return !!(dataChange && response.expert.status === 'busy' && response.query.queryId);
      } else {
        return false;
      }
    };

    StatusSyncClient.prototype.formData = function(data) {
      if (((data != null ? data.expert : void 0) != null) && ((data != null ? data.query : void 0) != null)) {
        return "" + data.expert.status + "-" + data.query.queryId + "-" + data.query.resellerId;
      } else {
        return '';
      }
    };

    StatusSyncClient.prototype.formatFullData = function(data) {
      if ((data != null ? data.expert : void 0) != null) {
        return JSON.stringify(data);
      } else {
        return '';
      }
    };

    StatusSyncClient.prototype.parseFullData = function(data) {
      return JSON.parse(data);
    };

    StatusSyncClient.prototype.parseData = function(data) {
      var checkNull, dataObj, ret;
      if (data == null) {
        return {
          expert: {
            status: null
          },
          query: {
            queryId: null,
            resellerId: null
          }
        };
      } else {
        dataObj = data.split('-');
        checkNull = function(data) {
          if ((!!data) && data !== 'null') {
            return data;
          } else {
            return null;
          }
        };
        return ret = {
          expert: {
            status: checkNull(dataObj[0])
          },
          query: {
            queryId: checkNull(dataObj[1]),
            resellerId: checkNull(dataObj[2])
          }
        };
      }
    };

    StatusSyncClient.prototype.checkStatus = function() {
      var data, first, fullData;
      if (this.checkTimeout != null) {
        clearTimeout(this.checkTimeout);
      }
      this.checkTimeout = null;
      this.getClientId();
      first = ((function(_this) {
        return function() {
          var id, _i, _ref;
          for (id = _i = 1, _ref = _this.getClientCounter(); 1 <= _ref ? _i <= _ref : _i >= _ref; id = 1 <= _ref ? ++_i : --_i) {
            if ($.cookie(_this.getClientIdCookieName(id)) !== null) {
              return id;
            }
          }
        };
      })(this))();
      if (first === this.notifyClientId) {
        return $.ajax({
          url: this.options.request.url,
          dataType: this.options.request.dataType,
          success: (function(_this) {
            return function(data, textStatus) {
              _this.notifyClientId = parseInt($.cookie(_this.getClientIdCookieName()), 10) || 0;
              if (_this.notifyClientId) {
                _this.lastData = data;
                if (_this.isStatusChanges(data)) {
                  if (typeof _this.callback === "function") {
                    _this.callback(data.query.queryId, data.query.resellerId);
                  }
                }
                if (typeof _this.tickCallback === "function") {
                  _this.tickCallback(data);
                }
                $.cookie(_this.options.cookie.fullData.name, _this.formatFullData(data), {
                  path: '/'
                });
                $.cookie(_this.options.cookie.status.name, _this.formData(data), {
                  path: '/'
                });
                return _this.checkTimeout = setTimeout(function() {
                  return _this.checkStatus();
                }, _this.options.request.interval);
              } else {
                return _this.checkStatus();
              }
            };
          })(this),
          error: (function(_this) {
            return function() {
              return _this.checkStatus();
            };
          })(this)
        });
      } else {
        data = $.cookie(this.options.cookie.status.name);
        if (!data) {
          data = null;
        }
        data = this.parseData(data);
        this.lastData = data;
        if (data) {
          if (this.isStatusChanges(data)) {
            if (typeof this.callback === "function") {
              this.callback(data.query.queryId, data.query.resellerId);
            }
          }
          if (!this.forceSlave) {
            $.cookie(this.options.cookie.status.name, this.formData(data), {
              path: '/'
            });
          }
        }
        fullData = $.cookie(this.options.cookie.fullData.name);
        if (!fullData) {
          fullData = null;
        }
        fullData = this.parseFullData(fullData);
        if (fullData) {
          if (typeof this.tickCallback === "function") {
            this.tickCallback(fullData);
          }
        }
        return this.checkTimeout = setTimeout((function(_this) {
          return function() {
            return _this.checkStatus();
          };
        })(this), this.options.request.interval);
      }
    };

    StatusSyncClient.prototype.destroy = function() {
      return $.cookie(this.getClientIdCookieName(), false, {
        expires: 0,
        path: '/'
      });
    };

    return StatusSyncClient;

  })();

  window.StatusSyncClient = StatusSyncClient;

  (function($) {
    return $.widget('ui.wVinquNewQueryNotification', {
      options: {
        query: {
          url: '/?page=vinqu&action=show&queryId=&resellerId='
        },
        selector: {
          showButton: '.j-show-query-button',
          pushNotificationRequest: '.j-push-notification-request',
          pushNotificationRequestEnable: '.j-push-notification-request-enable',
          pushNotificationRequestCancel: '.j-push-notification-request-cancel',
          pushNotificationMessage: '.j-push-notification-message',
          pushNotificationMessageTitle: '.j-push-notification-message-title',
          pushNotificationNewQueryMessage: '.j-push-notification-new-query',
          pushNotificationTitle: '.j-push-notification-title',
          pushNotificationImage: '.j-push-notification-image',
          pushNotificationRequestBubble: '.j-push-notification-request-bubble'
        },
        dialog: {
          width: 400,
          height: 'auto',
          "class": 'wVinquNewQueryNotificationDialog',
          title: ''
        },
        cookie: {
          push: 'showPushEnableRequest'
        }
      },
      pushEnabledRequest: 'Enable Push notification',
      pushEnabledRequestEnable: 'Enable Push notification',
      pushEnabledRequestCancel: 'Enable Push notification',
      pushEnabledMessageTitle: '',
      pushEnabledMessage: 'Push notification enabled',
      pushNewQueryMessage: 'New vin-query revived',
      pushTitle: 'vinqu.com',
      pushImage: null,
      queryId: 0,
      resellerId: 0,
      pushEnabled: false,
      pushNotification: null,
      _create: function() {
        var key, onBeforeUnload, selector, _ref;
        _ref = this.options.selector;
        for (key in _ref) {
          selector = _ref[key];
          this["$" + key] = $(selector, this.element);
        }
        if (this.$pushNotificationRequest.length) {
          this.pushEnabledRequest = this.$pushNotificationRequest.text();
          this.$pushNotificationRequest.remove();
        }
        if (this.$pushNotificationRequestEnable.length) {
          this.pushEnabledRequestEnable = this.$pushNotificationRequestEnable.text();
          this.$pushNotificationRequestEnable.remove();
        }
        if (this.$pushNotificationRequestCancel.length) {
          this.pushEnabledRequestCancel = this.$pushNotificationRequestCancel.text();
          this.$pushNotificationRequestCancel.remove();
        }
        if (this.$pushNotificationMessage.length) {
          this.pushEnabledMessage = this.$pushNotificationMessage.text();
          this.$pushNotificationMessage.remove();
        }
        if (this.$pushNotificationMessageTitle.length) {
          this.pushEnabledMessageTitle = this.$pushNotificationMessageTitle.text();
          this.$pushNotificationMessageTitle.remove();
        }
        if (this.$pushNotificationNewQueryMessage.length) {
          this.pushNewQueryMessage = this.$pushNotificationNewQueryMessage.text();
        }
        this.$pushNotificationRequestBubble.detach().appendTo(this.element.parent());
        if (this.$pushNotificationTitle.length) {
          this.pushTitle = this.$pushNotificationTitle.text();
          this.$pushNotificationTitle.remove();
        }
        if (this.$pushNotificationImage.length) {
          this.pushImage = this.$pushNotificationImage.attr('src');
          this.$pushNotificationImage.remove();
        }
        $('.logo a').click();
        this._initHtml5Push();
        this._initDialog();
        this.notifyClient = new StatusSyncClient({
          callback: (function(_this) {
            return function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _this.onNewQuery.apply(_this, args);
            };
          })(this)
        });
        onBeforeUnload = window.onbeforeunload;
        return window.onbeforeunload = (function(_this) {
          return function(e) {
            _this.element.modal('hide');
            if (_this.pushNotification) {
              _this.pushNotification.close();
            }
            if (typeof onBeforeUnload === "function") {
              onBeforeUnload();
            }
            return void 0;
          };
        })(this);
      },
      _initDialog: function() {
        this.$showButton.on('click', (function(_this) {
          return function(event) {
            return _this.onShowButtonClick(event);
          };
        })(this));
        return this.element.modal({
          show: false
        });
      },
      _initHtml5Push: function() {
        var notificationType;
        if (window.Notification != null) {
          notificationType = Notification.permission != null ? Notification.permission.toLowerCase() : null;
          switch (notificationType) {
            case 'granted':
              return this.pushEnabled = true;
            case 'denied':
              return this.pushEnabled = false;
            case 'default':
              return this._requestNotificationPermission();
            default:
              if (window.webkitNotifications != null) {
                if (window.webkitNotifications.checkPermission()) {
                  return this._requestNotificationPermission();
                } else {
                  return this.pushEnabled = true;
                }
              }
          }
        }
      },
      _requestNotificationPermission: function() {
        var requestPermission;
        if (!$.cookie(this.options.cookie.push)) {
          requestPermission = (function(_this) {
            return function() {
              setTimeout(function() {
                return $.cookie(_this.options.cookie.push, false, {
                  expires: 0,
                  path: '/'
                });
              }, 1000);
              return Notification.requestPermission(function(permission) {
                var notification;
                if (permission && permission.toLowerCase() === 'granted') {
                  _this.pushEnabled = true;
                  if (_this.pushEnabledMessage) {
                    notification = new Notification(_this.pushEnabledMessageTitle, {
                      tag: 'new-query-recieved',
                      icon: _this.pushImage,
                      iconUrl: _this.pushImage
                    });
                    return notification.onclick = function(event) {
                      return notification.close();
                    };
                  }
                }
              });
            };
          })(this);
          this.$pushNotificationRequestBubble.find('.btn-confirm-alert').on('click', (function(_this) {
            return function(event) {
              _this.$pushNotificationRequestBubble.modal('hide');
              return requestPermission();
            };
          })(this));
          this.$pushNotificationRequestBubble.on('hidden', (function(_this) {
            return function(event) {
              return $.cookie(_this.options.cookie.push, true, {
                expires: 7,
                path: '/'
              });
            };
          })(this));
          return this.$pushNotificationRequestBubble.modal();
        }
      },
      onNewQuery: function(queryId, resellerId) {
        this.queryId = queryId;
        this.resellerId = resellerId;
        this.element.modal('show');
        if (this.pushEnabled) {
          this.pushNotification = new Notification(this.pushTitle, {
            tag: 'new-query-recieved',
            icon: this.pushImage,
            iconUrl: this.pushImage
          });
          this.pushNotification.onclick = (function(_this) {
            return function(event) {
              _this.element.modal('hide');
              _this.pushNotification.close();
              return _this.showQuery();
            };
          })(this);
          return this.pushNotification.onclose = (function(_this) {
            return function(event) {
              return _this.pushNotification = null;
            };
          })(this);
        }
      },
      onShowButtonClick: function(event) {
        this.element.modal('hide');
        if (this.pushNotification != null) {
          this.pushNotification.close();
        }
        return this.showQuery();
      },
      showQuery: function() {
        var newTab;
        newTab = window.open(this.getNewQueryUrl(), '_blank');
        newTab.focus();
        return window.location.reload();
      },
      getNewQueryUrl: function() {
        return this.options.query.url.replace(/(queryId=)[^&]*/, "$1" + this.queryId).replace(/(resellerId=)[^&]*/, "$1" + this.resellerId);
      }
    });
  })(jQuery);

  $(document).ready(function() {
    return $('.wVinquNewQueryNotification').wVinquNewQueryNotification();
  });

}).call(this);
$(document).ready(function() {
	$('#lgnform').submit(function() {
		if (($.trim($('#login').val()) === '') ||
			($.trim($('#pass').val()) === '')) {
			return false;
		} else {
			$('#go').attr('disabled', 'disabled');
		}
	});
});

